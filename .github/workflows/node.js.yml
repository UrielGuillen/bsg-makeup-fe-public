name: BSG-Makeup-FE-Pipeline

on:
  pull_request:
    branches: ['main']
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Type of release (major, minor, patch)'
        required: true
        default: 'patch'
      deployEnv:
        description: 'Type of deploy environment (dev, prod)'
        required: true
        default: 'dev'

jobs:
  check_version_bump_type:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.releaseType != ''
    runs-on: ubuntu-latest

    steps:
      - name: check release type
        run: |
          if [[ "${{ github.event.inputs.releaseType }}" != "major" && "${{ github.event.inputs.releaseType }}" != "minor" && "${{ github.event.inputs.releaseType }}" != "patch" ]]; then
            echo "Invalid releaseType provided. Please specify major, minor, or patch."
            exit 1
          fi

  install_dependencies:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 18.x ]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Installing dependencies
        run: npm ci --legacy-peer-deps

  lint_application:
    needs: install_dependencies
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 18.x ]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Installing dependencies
        run: npm ci --legacy-peer-deps

      - name: Linting application
        run: npm run lint-check

  test_application:
    needs: [ install_dependencies, lint_application ]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 18.x ]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Installing dependencies
        run: npm ci --legacy-peer-deps

      - name: Linting application
        run: npm run test

  build:
    needs: [ install_dependencies, lint_application, test_application ]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Installing dependencies
        run: npm ci --legacy-peer-deps

      - name: Building the application
        run: npm run build

  patch-release:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.releaseType == 'patch'
    needs: [ check_version_bump_type, install_dependencies, lint_application, build, test_application ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'

      - name: Upgrade patch version
        if: github.event.inputs.deployEnv == 'dev'
        id: upgrade
        run: |
          git config --global user.email "urielguillenh94@gmail.com"
          git config --global user.name "UrielGuillen"
          VERSION=$(npm version patch -m 'Upgrade to %s')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_PATH
          echo "${VERSION}" > version.txt

      - name: Get latest version tag
        if: github.event.inputs.deployEnv == 'prod'
        id: latestTag
        uses: actions/github-script@v3.1.1
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const releases = await github.repos.listReleases({ owner, repo });
            const version = releases.data[0].tag_name;
            return version;

      - name: Write latest version to file
        if: github.event.inputs.deployEnv == 'prod'
        run: |
          echo "${{steps.latestTag.outputs.result}}" > version.txt

      - name: Archive Patch Version
        uses: actions/upload-artifact@v2
        with:
          name: version
          path: version.txt

      - name: Configure GitHub credentials
        if: github.event.inputs.deployEnv == 'dev'
        run: |
          git config --global credential.helper store
          echo "https://$PAT_TOKEN:x-oauth-basic@github.com" > ~/.git-credentials

      - name: Push changes
        if: github.event.inputs.deployEnv == 'dev'
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git push https://${PAT_TOKEN}@github.com/UrielGuillen/bsg-makeup-fe.git
          git push --tags https://${PAT_TOKEN}@github.com/UrielGuillen/bsg-makeup-fe.git

      - name: Create Patch Release
        if: github.event.inputs.deployEnv == 'dev'
        id: create_patch_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

  deploy-after-patch:
    if: github.event.inputs.releaseType == 'patch'
    needs: [ patch-release ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: version

      - name: Load Version
        id: load-version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_PATH

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Checkout the created tag
        run: git fetch --tags && git checkout ${{ env.VERSION }}

      - name: Setup node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Check deploy environment provided
        run: |
          if [[ "${{ github.event.inputs.deployEnv }}" != "dev" && "${{ github.event.inputs.deployEnv }}" != "prod" ]]; then
            echo "Invalid deploy environemnt provided. Please specify dev or prod."
            exit 1
          fi

      - name: Build application
        run: npm run build

      - name: Deploy to DEV environment
        if: github.event.inputs.deployEnv == 'dev'
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Configure AWS credentials
        if: github.event.inputs.deployEnv == 'prod'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Deploy to PROD environment
        if: github.event.inputs.deployEnv == 'prod'
        run: aws s3 sync dist/bsg-makeup-fe s3://makeup-front-end-bucket/

  minor-release:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.releaseType == 'minor'
    needs: [ check_version_bump_type, install_dependencies, lint_application, build, test_application ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'

      - name: Upgrade minor version
        if: github.event.inputs.deployEnv == 'dev'
        id: upgrade
        run: |
          git config --global user.email "urielguillenh94@gmail.com"
          git config --global user.name "UrielGuillen"
          VERSION=$(npm version minor -m 'Upgrade to %s')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_PATH
          echo "${VERSION}" > version.txt

      - name: Get latest version tag
        if: github.event.inputs.deployEnv == 'prod'
        id: latestTag
        uses: actions/github-script@v3.1.1
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const releases = await github.repos.listReleases({ owner, repo });
            const version = releases.data[0].tag_name;
            return version;

      - name: Write latest version to file
        if: github.event.inputs.deployEnv == 'prod'
        run: |
          echo "${{steps.latestTag.outputs.result}}" > version.txt

      - name: Archive Minor Version
        uses: actions/upload-artifact@v2
        with:
          name: version
          path: version.txt

      - name: Configure GitHub credentials
        if: github.event.inputs.deployEnv == 'dev'
        run: |
          git config --global credential.helper store
          echo "https://$PAT_TOKEN:x-oauth-basic@github.com" > ~/.git-credentials

      - name: Push changes
        if: github.event.inputs.deployEnv == 'dev'
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git push https://${PAT_TOKEN}@github.com/UrielGuillen/bsg-makeup-fe.git
          git push --tags https://${PAT_TOKEN}@github.com/UrielGuillen/bsg-makeup-fe.git

      - name: Create Minor Release
        if: github.event.inputs.deployEnv == 'dev'
        id: create_minor_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

  deploy-after-minor:
    if: github.event.inputs.releaseType == 'minor'
    needs: [ minor-release ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: version

      - name: Load Version
        id: load-version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_PATH

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Checkout the created tag
        run: git fetch --tags && git checkout ${{ env.VERSION }}

      - name: Setup node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Check deploy environment provided
        run: |
          if [[ "${{ github.event.inputs.deployEnv }}" != "dev" && "${{ github.event.inputs.deployEnv }}" != "prod" ]]; then
            echo "Invalid deploy environemnt provided. Please specify dev or prod."
            exit 1
          fi

      - name: Build application
        run: npm run build

      - name: Deploy to DEV environment
        if: github.event.inputs.deployEnv == 'dev'
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Configure AWS credentials
        if: github.event.inputs.deployEnv == 'prod'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Deploy to PROD environment
        if: github.event.inputs.deployEnv == 'prod'
        run: aws s3 sync dist/bsg-makeup-fe s3://makeup-front-end-bucket/

  release:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.releaseType == 'major'
    needs: [ check_version_bump_type, install_dependencies, lint_application, build, test_application ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'

      - name: Upgrade major version
        if: github.event.inputs.deployEnv == 'dev'
        id: upgrade
        run: |
          git config --global user.email "urielguillenh94@gmail.com"
          git config --global user.name "UrielGuillen"
          VERSION=$(npm version major -m 'Upgrade to %s')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_PATH
          echo "${VERSION}" > version.txt

      - name: Get latest version tag
        if: github.event.inputs.deployEnv == 'prod'
        id: latestTag
        uses: actions/github-script@v3.1.1
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const releases = await github.repos.listReleases({ owner, repo });
            const version = releases.data[0].tag_name;
            return version;

      - name: Write latest version to file
        if: github.event.inputs.deployEnv == 'prod'
        run: |
          echo "${{steps.latestTag.outputs.result}}" > version.txt

      - name: Archive Major Version
        uses: actions/upload-artifact@v2
        with:
          name: version
          path: version.txt

      - name: Configure GitHub credentials
        if: github.event.inputs.deployEnv == 'dev'
        run: |
          git config --global credential.helper store
          echo "https://$PAT_TOKEN:x-oauth-basic@github.com" > ~/.git-credentials

      - name: Push changes
        if: github.event.inputs.deployEnv == 'dev'
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git push https://${PAT_TOKEN}@github.com/UrielGuillen/bsg-makeup-fe.git
          git push --tags https://${PAT_TOKEN}@github.com/UrielGuillen/bsg-makeup-fe.git

      - name: Create Major Release
        if: github.event.inputs.deployEnv == 'dev'
        id: create_patch_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

  deploy-after-major:
    if: github.event.inputs.releaseType == 'major'
    needs: [ release ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: version

      - name: Load Version
        id: load-version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_PATH

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Checkout the created tag
        run: git fetch --tags && git checkout ${{ env.VERSION }}

      - name: Setup node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Check deploy environment provided
        run: |
          if [[ "${{ github.event.inputs.deployEnv }}" != "dev" && "${{ github.event.inputs.deployEnv }}" != "prod" ]]; then
            echo "Invalid deploy environemnt provided. Please specify dev or prod."
            exit 1
          fi

      - name: Build application
        run: npm run build

      - name: Deploy to DEV environment
        if: github.event.inputs.deployEnv == 'dev'
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Configure AWS credentials
        if: github.event.inputs.deployEnv == 'prod'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Deploy to PROD environment
        if: github.event.inputs.deployEnv == 'prod'
        run: aws s3 sync dist/bsg-makeup-fe s3://makeup-front-end-bucket/
